import streamlit as st
import pandas as pd
from datetime import datetime

DATA_AUDIENCIA_FIELD = 'UF_CRM_1731693426655' # Campo da Data da AudiÃªncia

def display_agenda_audiencia_tab(df_audiencia: pd.DataFrame):
    st.subheader("ðŸ“… Agenda de AudiÃªncias")

    if df_audiencia.empty or DATA_AUDIENCIA_FIELD not in df_audiencia.columns:
        st.warning(f"NÃ£o hÃ¡ dados de audiÃªncia ou a coluna '{DATA_AUDIENCIA_FIELD}' nÃ£o foi encontrada.")
        return

    # Garante que a coluna de data da audiÃªncia Ã© do tipo datetime e remove NaT
    df_agenda = df_audiencia.copy()
    df_agenda[DATA_AUDIENCIA_FIELD] = pd.to_datetime(df_agenda[DATA_AUDIENCIA_FIELD], errors='coerce')
    df_agenda.dropna(subset=[DATA_AUDIENCIA_FIELD], inplace=True)

    if df_agenda.empty:
        st.info("NÃ£o foram encontradas audiÃªncias com datas vÃ¡lidas.")
        return

    # --- SeÃ§Ã£o 1: Tabela de Totais Mensais com Filtro de Ano ---
    st.markdown("#### AudiÃªncias Agrupadas por MÃªs")
    
    # Filtro de Ano
    anos_disponiveis = sorted(df_agenda[DATA_AUDIENCIA_FIELD].dt.year.unique(), reverse=True)
    if not anos_disponiveis:
        st.info("Nenhum ano disponÃ­vel para filtro.")
        return

    ano_selecionado = st.selectbox(
        "Selecione o Ano", 
        options=anos_disponiveis, 
        index=0 # Seleciona o ano mais recente por padrÃ£o
    )

    # df_filtrado_ano = df_agenda[df_agenda[DATA_AUDIENCIA_FIELD].dt.year == ano_selecionado]
    # Para evitar SettingWithCopyWarning, fazemos uma cÃ³pia explÃ­cita se vamos adicionar colunas
    df_filtrado_ano = df_agenda[df_agenda[DATA_AUDIENCIA_FIELD].dt.year == ano_selecionado].copy()

    if df_filtrado_ano.empty:
        st.info(f"Nenhuma audiÃªncia encontrada para o ano de {ano_selecionado}.")
    else:
        # Agrupar por mÃªs e contar audiÃªncias
        df_filtrado_ano['MÃªs Num'] = df_filtrado_ano[DATA_AUDIENCIA_FIELD].dt.month
        # df_filtrado_ano['MÃªs'] = df_filtrado_ano[DATA_AUDIENCIA_FIELD].dt.strftime('%B') # Nome do mÃªs por extenso - original

        # Mapeamento para nomes dos meses em portuguÃªs
        mapa_meses_pt = {
            1: "Janeiro", 2: "Fevereiro", 3: "MarÃ§o", 4: "Abril",
            5: "Maio", 6: "Junho", 7: "Julho", 8: "Agosto",
            9: "Setembro", 10: "Outubro", 11: "Novembro", 12: "Dezembro"
        }
        df_filtrado_ano['MÃªs'] = df_filtrado_ano['MÃªs Num'].map(mapa_meses_pt)
        
        audiencias_por_mes = df_filtrado_ano.groupby(['MÃªs Num', 'MÃªs']).size().reset_index(name='Total de AudiÃªncias')
        audiencias_por_mes = audiencias_por_mes.sort_values(by='MÃªs Num')
        audiencias_por_mes_display = audiencias_por_mes[['MÃªs', 'Total de AudiÃªncias']]
        
        st.table(audiencias_por_mes_display.set_index('MÃªs'))

    # --- SeÃ§Ã£o 2: VisualizaÃ§Ã£o Detalhada (Estilo CalendÃ¡rio/Agenda) ---
    st.markdown("--- ") # Separador
    st.markdown("#### Detalhes das AudiÃªncias (por Data)")

    # Ordenar pela data da audiÃªncia mais recente primeiro, ou mais antiga - a decidir
    df_agenda_sorted = df_agenda.sort_values(by=DATA_AUDIENCIA_FIELD, ascending=True)

    # Selecionar colunas relevantes para exibiÃ§Ã£o
    colunas_exibir = [
        DATA_AUDIENCIA_FIELD,
        'TITLE', # TÃ­tulo do Deal/Processo
        'STAGE_NAME', # Etapa atual
        'ASSIGNED_BY_NAME' # ResponsÃ¡vel
    ]
    # Adicionar outras colunas se existirem e forem Ãºteis, ex: 'COMPANY_TITLE' ou 'CONTACT_NAME'
    # if 'COMPANY_TITLE' in df_agenda_sorted.columns: colunas_exibir.append('COMPANY_TITLE')

    df_display_agenda = df_agenda_sorted[[col for col in colunas_exibir if col in df_agenda_sorted.columns]].copy()
    
    # Formatar a data para exibiÃ§Ã£o
    df_display_agenda[DATA_AUDIENCIA_FIELD] = df_display_agenda[DATA_AUDIENCIA_FIELD].dt.strftime('%d/%m/%Y')
    df_display_agenda.rename(columns={
        DATA_AUDIENCIA_FIELD: 'Data da AudiÃªncia',
        'TITLE': 'Processo/Deal',
        'STAGE_NAME': 'Etapa Atual',
        'ASSIGNED_BY_NAME': 'ResponsÃ¡vel'
    }, inplace=True)

    if df_display_agenda.empty:
        st.info("NÃ£o hÃ¡ detalhes de audiÃªncias para exibir.")
    else:
        st.dataframe(df_display_agenda, height=600, use_container_width=True)

    # TODO: Adicionar mais interatividade ou visualizaÃ§Ãµes se necessÃ¡rio,
    # como um calendÃ¡rio visual real (se uma biblioteca for permitida no futuro)
    # ou agrupar por semana, etc. 